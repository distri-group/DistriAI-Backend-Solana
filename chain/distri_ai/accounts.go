// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Machine struct {
	Owner          ag_solanago.PublicKey
	Uuid           [16]uint8
	Metadata       string
	Status         MachineStatus
	Price          uint64
	MaxDuration    uint32
	Disk           uint32
	CompletedCount uint32
	FailedCount    uint32
	Score          uint8
}

var MachineDiscriminator = [8]byte{25, 102, 22, 13, 58, 243, 138, 79}

func (obj Machine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MachineDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Uuid` param:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `MaxDuration` param:
	err = encoder.Encode(obj.MaxDuration)
	if err != nil {
		return err
	}
	// Serialize `Disk` param:
	err = encoder.Encode(obj.Disk)
	if err != nil {
		return err
	}
	// Serialize `CompletedCount` param:
	err = encoder.Encode(obj.CompletedCount)
	if err != nil {
		return err
	}
	// Serialize `FailedCount` param:
	err = encoder.Encode(obj.FailedCount)
	if err != nil {
		return err
	}
	// Serialize `Score` param:
	err = encoder.Encode(obj.Score)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Machine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MachineDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[25 102 22 13 58 243 138 79]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `MaxDuration`:
	err = decoder.Decode(&obj.MaxDuration)
	if err != nil {
		return err
	}
	// Deserialize `Disk`:
	err = decoder.Decode(&obj.Disk)
	if err != nil {
		return err
	}
	// Deserialize `CompletedCount`:
	err = decoder.Decode(&obj.CompletedCount)
	if err != nil {
		return err
	}
	// Deserialize `FailedCount`:
	err = decoder.Decode(&obj.FailedCount)
	if err != nil {
		return err
	}
	// Deserialize `Score`:
	err = decoder.Decode(&obj.Score)
	if err != nil {
		return err
	}
	return nil
}

type Order struct {
	OrderId   [16]uint8
	Buyer     ag_solanago.PublicKey
	Seller    ag_solanago.PublicKey
	MachineId [16]uint8
	Price     uint64
	Duration  uint32
	Total     uint64
	Metadata  string
	Status    OrderStatus
}

var OrderDiscriminator = [8]byte{134, 173, 223, 185, 77, 86, 28, 51}

func (obj Order) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Buyer` param:
	err = encoder.Encode(obj.Buyer)
	if err != nil {
		return err
	}
	// Serialize `Seller` param:
	err = encoder.Encode(obj.Seller)
	if err != nil {
		return err
	}
	// Serialize `MachineId` param:
	err = encoder.Encode(obj.MachineId)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Duration` param:
	err = encoder.Encode(obj.Duration)
	if err != nil {
		return err
	}
	// Serialize `Total` param:
	err = encoder.Encode(obj.Total)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Order) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[134 173 223 185 77 86 28 51]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Buyer`:
	err = decoder.Decode(&obj.Buyer)
	if err != nil {
		return err
	}
	// Deserialize `Seller`:
	err = decoder.Decode(&obj.Seller)
	if err != nil {
		return err
	}
	// Deserialize `MachineId`:
	err = decoder.Decode(&obj.MachineId)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Duration`:
	err = decoder.Decode(&obj.Duration)
	if err != nil {
		return err
	}
	// Deserialize `Total`:
	err = decoder.Decode(&obj.Total)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}
